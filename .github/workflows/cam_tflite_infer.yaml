name: "cam_tflite_infer"

on:
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
  release:
    types: [ published, created, edited ]
  workflow_dispatch:
    

jobs:
  infer_models:
    permissions:
      contents: read
      pull-requests: write

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          persist-credentials: false

      - name: Apply patches
        working-directory: ${{github.workspace}}
        run: |
          cd third_party/tensorflow
          git apply ../../patches/0001-*.patch || echo "Patch already applied"
      
      - name: Install runtime packages
        run: |
          sudo apt-get -o DPkg::Lock::Timeout=1200 -y update
          sudo apt-get -o DPkg::Lock::Timeout=1200 -y install \
            \
            cmake g++ git unzip \
            clang \
            \
            libusb-1.0-0 libgtk-3-dev libtbb-dev \
            $([[ "${{ matrix.os }}" == "ubuntu-20.04" ]] && echo "libtbb2") \
            $([[ "${{ matrix.os }}" == "ubuntu-22.04" ]] && echo "libtbbmalloc2")

          sudo apt-get -o DPkg::Lock::Timeout=1200 -y install \
            build-essential autoconf libtool pkg-config zlib1g-dev \
            \
            meson ninja-build 
 
            
          cmake --version
          gcc --version

      - name: Cache opencv
        id: cache-opencv
        uses: actions/cache@v4
        with:
          key: ${{
            matrix.os == 'ubuntu-20.04' && 'opencv-ubuntu20' ||
            matrix.os == 'ubuntu-22.04' && 'opencv-ubuntu22' }}
          path: |
            ${{ github.workspace }}/build/staging

      - name: Build opencv
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}
        run: |
          git clone https://github.com/opencv/opencv.git opencv_${{ matrix.os }}
          git clone https://github.com/opencv/opencv_contrib.git opencv_contrib_${{ matrix.os }}
          git -C opencv_${{ matrix.os }} checkout tags/4.12.0
          git -C opencv_contrib_${{ matrix.os }} checkout tags/4.12.0
          mkdir -p ${{ github.workspace }}/build/opencv_${{ matrix.os }}
          CC=/usr/bin/clang CXX=/usr/bin/clang++ \
          cmake \
            -S ${{ github.workspace }}/opencv_${{ matrix.os }} \
            -B ${{ github.workspace }}/build/opencv_${{ matrix.os }} \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_STAGING_PREFIX=${{ github.workspace }}/build/staging \
            -D BUILD_NUMBER=${GITHUB_RUN_ID} \
            -D CMAKE_VERBOSE_MAKEFILE=ON \
            -D OPENCV_GENERATE_PKGCONFIG=ON \
            \
            -D BUILD_opencv_gapi=OFF \
            -D BUILD_opencv_gapi_samples=OFF \
            -D BUILD_EXAMPLES=ON
          cmake --build ${{ github.workspace }}/build/opencv_${{ matrix.os }} -- -j4

      - name: Cache grpc
        id: cache-grpc
        uses: actions/cache@v4
        with:
          key: grpc
          path: |
            ${{ github.workspace }}/build/staging

      - name: Build grpc
        if: steps.cache-grpc.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}
        run: |
          mkdir -p ${{github.workspace}}/build/grpc
          CC=/usr/bin/clang CXX=/usr/bin/clang++ \
          cmake \
            -S ${{ github.workspace }}/third_party/grpc \
            -B ${{ github.workspace }}/build/grpc \
            -D gRPC_INSTALL=ON \
            -D gRPC_BUILD_TESTS=OFF \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_CXX_STANDARD=17 \
            -D CMAKE_STAGING_PREFIX=${{ github.workspace }}/build/staging \
            -D gRPC_ZLIB_PROVIDER=package

          cmake --build ${{ github.workspace }}/build/grpc -- -j4
          cmake --install ${{ github.workspace }}/build/grpc
          
      - name: Cache pipewire
        id: cache-pipewire
        uses: actions/cache@v4
        with:
          key: pipewire
          path: |
            ${{ github.workspace }}/build/staging

      - name: Build pipewire
        if: steps.cache-pipewire.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: |
          git clone --branch 1.4.7 --depth 1 https://gitlab.freedesktop.org/pipewire/pipewire.git
          meson setup build/pipewire pipewire \
            --prefix=${{ github.workspace }}/build/staging
          meson compile -C build/pipewire
          meson install -C build/pipewire

      - name: Cache abseil-cpp
        id: cache-abseil-cpp
        uses: actions/cache@v4
        with:
          key: abseil-cpp
          path: |
            ${{ github.workspace }}/build/staging

      - name: Build abseil-cpp
        if: steps.cache-abseil-cpp.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}
        run: |
          mkdir -p ${{github.workspace}}/build/abseil-cpp
          CC=/usr/bin/clang CXX=/usr/bin/clang++ \
          cmake \
            -S ${{ github.workspace }}/third_party/abseil-cpp \
            -B ${{ github.workspace }}/build/abseil-cpp \
            -D BUILD_SHARED_LIBS=ON \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_STAGING_PREFIX=${{ github.workspace }}/build/staging \

          cmake --build ${{ github.workspace }}/build/abseil-cpp -- -j4
          cmake --install ${{ github.workspace }}/build/abseil-cpp

      - name: Cache tensorflow
        id: cache-tensorflow
        uses: actions/cache@v4
        with:
          key: tensorflow
          path: |
            ${{ github.workspace }}/build/staging

      - name: Build tensorflow
        if: steps.cache-tensorflow.outputs.cache-hit != 'true'
        working-directory: ${{github.workspace}}
        run: |
          mkdir -p ${{github.workspace}}/build/tensorflow
          CC=/usr/bin/clang CXX=/usr/bin/clang++ \
          cmake \
            -S ${{ github.workspace }}/third_party/tensorflow/tensorflow/lite \
            -B ${{ github.workspace }}/build/tensorflow \
            -G Ninja \
            -D TFLITE_ENABLE_GPU=ON \
            -D TFLITE_ENABLE_XNNPACK=ON \
            -D BUILD_SHARED_LIBS=ON \
            -D FETCHCONTENT_FULLY_DISCONNECTED=OFF \
            -D CMAKE_C_COMPILER=/usr/bin/clang \
            -D CMAKE_CXX_COMPILER=/usr/bin/clang++ \
            -D CMAKE_STAGING_PREFIX=${{ github.workspace }}/build/staging \
            -D ABSL_PROPAGATE_CXX_STD=ON \
            -D CMAKE_POLICY_DEFAULT_CMP0135=NEW \
            -D CMAKE_PREFIX_PATH=${{ github.workspace }}/build/staging

          ninja -C ${{ github.workspace }}/build/tensorflow -j 30